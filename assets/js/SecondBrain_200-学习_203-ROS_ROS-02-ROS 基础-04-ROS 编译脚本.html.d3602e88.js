"use strict";(self.webpackChunkvuepress_notes=self.webpackChunkvuepress_notes||[]).push([[475],{204:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>l,data:()=>d});var a=s(8178);const n={},l=(0,s(628).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="cmakelist-txt" tabindex="-1"><a class="header-anchor" href="#cmakelist-txt"><span>CMakeList.txt</span></a></h1><h2 id="cmakelist-txt-概述" tabindex="-1"><a class="header-anchor" href="#cmakelist-txt-概述"><span>CMakeList.txt 概述</span></a></h2><p><code>CMakeLists.txt</code> 简称编译脚本，是 <code>CMake</code> 构建系统的配置文件，用于构建功能包</p><p><code>CMakeLists.txt</code> 描述如何构建功能包</p><h2 id="整体结构" tabindex="-1"><a class="header-anchor" href="#整体结构"><span>整体结构</span></a></h2><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">结构含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmake_minimum_required()</code></td><td style="text-align:center;">CMake 版本（必要）</td></tr><tr><td style="text-align:center;"><code>project()</code></td><td style="text-align:center;">功能包名称（必要）</td></tr><tr><td style="text-align:center;"><code>find_package()</code></td><td style="text-align:center;">查找并加载外部依赖包（必要）</td></tr><tr><td style="text-align:center;"><code>add_message_files()</code> <code>add_service_files()</code> <code>add_action_files()</code></td><td style="text-align:center;">添加 消息/服务/操作 文件（自定义消息时必要）</td></tr><tr><td style="text-align:center;"><code>generate_messages()</code></td><td style="text-align:center;">生成消息文件（自定义消息时必要）</td></tr><tr><td style="text-align:center;"><code>catkin_package()</code></td><td style="text-align:center;">声明 catkin 特定的构建信息（必要）</td></tr><tr><td style="text-align:center;"><code>include_directories()</code></td><td style="text-align:center;">添加头文件包含路径（必要）</td></tr><tr><td style="text-align:center;"><code>add_library()</code></td><td style="text-align:center;">构建库文件（有自定义头文件时必要）</td></tr><tr><td style="text-align:center;"><code>add_executable()</code></td><td style="text-align:center;">构建可执行文件（C++ 文件作为执行文件时必要）</td></tr><tr><td style="text-align:center;"><code>add_dependencies()</code></td><td style="text-align:center;">显式声明目标之间的依赖关系（自定义消息和动态库/自定义头文件时必要）</td></tr><tr><td style="text-align:center;"><code>target_link_libraries()</code></td><td style="text-align:center;">将目标（可执行文件或库）链接到库（必要）</td></tr><tr><td style="text-align:center;"><code>catkin_python_setup()</code></td><td style="text-align:center;">启用 Python 模块支持</td></tr><tr><td style="text-align:center;"><code>catkin_add_gtest()</code></td><td style="text-align:center;">编译测试</td></tr><tr><td style="text-align:center;"><code>install()</code></td><td style="text-align:center;">安装规则</td></tr></tbody></table><h2 id="函数串联流程" tabindex="-1"><a class="header-anchor" href="#函数串联流程"><span>函数串联流程</span></a></h2><ol><li>查找依赖：<code>find_package()</code> 查找所有需要的依赖包</li><li>配置 catkin：<code>catkin_package()</code> 声明包的构建信息</li><li>设置包含路径：<code>include_directories()</code> 设置头文件搜索路径</li><li>构建库：<code>add_library()</code> 将源代码编译为库（如果有）</li><li>构建可执行文件：<code>add_executable()</code> 将源代码编译为可执行文件</li><li>指定构建顺序：<code>add_dependencies()</code> 声明构建顺序依赖</li><li>链接库：<code>target_link_libraries()</code> 将可执行文件与需要的库链接</li></ol><h2 id="cmake-minimum-required" tabindex="-1"><a class="header-anchor" href="#cmake-minimum-required"><span>cmake_minimum_required()</span></a></h2><p>每个 <code>CMakeLists.txt</code> 文件必须以所需的 CMake 版本开始，Catkin 需要 2.8.3 或更高版本：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cmake_minimum_required(VERSION 2.8.3)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="project" tabindex="-1"><a class="header-anchor" href="#project"><span>project()</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">project(功能包名)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>功能包名必须与对应的功能包名相同</li><li>可通过使用变量 <code>${PROJECT_NAME}</code> 引用功能包名</li></ul><h2 id="find-package" tabindex="-1"><a class="header-anchor" href="#find-package"><span>find_package()</span></a></h2><p>作用：查看并加载外部依赖包</p><p>写法一：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(功能包名 REQUIRED)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>作用： <ul><li>仅检查功能包的存在</li><li>不加载任何组件</li></ul></li><li>适用场景：只需要验证包是否存在，且不需要其特定功能模块</li><li>例子：如 <code>Eigen3</code></li></ul><p>写法二：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(功能包名 REQUIRED COMPONENTS 组件名1 组件名2 ... 组件名n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>作用： <ul><li>检查功能包的存在，加载所选组件</li><li>确保这些组件的头文件和库可用</li></ul></li><li>适用场景：需要包的具体功能模块时</li><li>例子：如 <code>catkin</code> 的组件化设计（<code>roscpp</code>、<code>std_msgs</code> 等）</li></ul><p><strong>加载依赖包用于本功能包的构建</strong>：会定义一些变量，供后续 CMake 命令使用</p><ol><li><p>所查找功能包的头文件路径变量：<code>功能包名_INCLUDE_DIRS</code></p><ul><li><p>作用：用于 <code>include_directories()</code>，使得编译器能找到依赖包的头文件</p></li><li><p>用法：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(功能包名 REQUIRED)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">include_directories(${功能包名_INCLUDE_DIRS})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>所查找功能包的库文件路径：<code>功能包名_LIBRARIES</code></p><ul><li><p>作用：用于 <code>target_link_libraries()</code>，链接依赖包的库文件</p></li><li><p>用法：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(功能包名 REQUIRED)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">target_link_libraries(执行文件名 ${功能包名_LIBRARIES})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Catkin 特有的变量：<code>catkin_INCLUDE_DIRS</code>、<code>catkin_LIBRARIES</code></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">include_directories(${catkin_INCLUDE_DIRS})  # 包含所有依赖的头文件</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">target_link_libraries(执行文件名 ${catkin_LIBRARIES})  # 链接所有依赖的库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="自定义数据类型-消息-服务-操作" tabindex="-1"><a class="header-anchor" href="#自定义数据类型-消息-服务-操作"><span>自定义数据类型：消息/服务/操作</span></a></h2><p><code>.msg</code> 、 <code>.srv</code> 和 <code>.action</code> 文件被 ROS 包编译和使用之前需要一个特殊的预处理器构建步骤</p><p>宏的目的是生成特定于编程语言的文件，以便可以使用所选编程语言中的消息、服务和操作</p><h3 id="处理消息、服务和操作的宏" tabindex="-1"><a class="header-anchor" href="#处理消息、服务和操作的宏"><span>处理消息、服务和操作的宏</span></a></h3><ul><li>消息：<code>add_message_files(...)</code></li><li>服务：<code>add_service_files(...)</code></li><li>操作：<code>add_action_files(...)</code></li></ul><p>这些宏后面必须跟调用生成消息文件的函数：<code>generate_messages( )</code></p><h3 id="使用结构" tabindex="-1"><a class="header-anchor" href="#使用结构"><span>使用结构</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> find_package(catkin REQUIRED COMPONENTS message_generation ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> add_message_files(FILES xxx.msg ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> add_service_files(FILES xxx.srv ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> add_action_files(FILES xxx.action ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> generate_messages(DEPENDENCIES std_msgs ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> catkin_package(CATKIN_DEPENDS message_runtime ...)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>find_package()</code> 的组件必须要有 <code>message_generation</code></li><li><code>catkin_package()</code> 的 DEPENDS 依赖项必须要有 <code>message_runtime</code></li></ul><h2 id="catkin-package" tabindex="-1"><a class="header-anchor" href="#catkin-package"><span>catkin_package()</span></a></h2><p>作用：主要用于解决以下 ROS 包构建中的三个核心问题</p><ol><li>依赖传递：声明本包对其他包的依赖关系，使依赖关系能正确传递给下游包 <ul><li>确保下游包的 <code>find_package()</code> 能正确找到本包的头文件和库</li></ul></li><li>接口导出：定义本包对外提供的头文件和库文件</li><li>构建隔离：确保包能独立构建，同时保持正确的依赖关系</li></ol><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catkin_package(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  INCLUDE_DIRS include</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LIBRARIES 库名称</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  CATKIN_DEPENDS 组件名1 组件2 ... 组件名n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DEPENDS 功能包名</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>库名称</code> 为 <code>add_library(库名称)</code> 的库名称</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>INCLUDE_DIRS</code></td><td style="text-align:center;">本包对外提供的头文件目录 <code>include/</code></td></tr><tr><td style="text-align:center;"><code>LIBRARIES</code></td><td style="text-align:center;">本包对外提供的库文件（通过 <code>add_library()</code> 创建的）</td></tr><tr><td style="text-align:center;"><code>CATKIN_DEPENDS</code></td><td style="text-align:center;">本包依赖的纯 Catkin 包</td></tr><tr><td style="text-align:center;"><code>DEPENDS</code></td><td style="text-align:center;">本包依赖的非 Catkin 包</td></tr></tbody></table><p><strong>补充</strong>：可以全不使用，需要使用哪个添加哪个</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 纯头文件库</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catkin_package(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  INCLUDE_DIRS include</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  CATKIN_DEPENDS 组件名1 组件2 ... 组件名n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 带库的包</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catkin_package(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  INCLUDE_DIRS include</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LIBRARIES 库名称</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  CATKIN_DEPENDS 组件名1 组件2 ... 组件名n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DEPENDS 功能包名</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 元包</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catkin_package(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  METAPACKAGE TRUE</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时序位置</strong>：</p><p><code>catkin_package()</code> 必须在使用 <code>add_library()</code> 或 <code>add_executable()</code> 之前调用</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find_package(catkin REQUIRED ...)  # (1) 先找依赖</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catkin_package(...)                # (2) 声明本包信息</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">add_library(...)                   # (3) 然后构建</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：需先知道本包的依赖，才能正确声明本包的信息，最后才能基于这些信息构建目标</p><h2 id="include-directories" tabindex="-1"><a class="header-anchor" href="#include-directories"><span>include_directories()</span></a></h2><p>作用：指定头文件搜索路径</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">include_directories(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  include                  # 本包的头文件目录（可选）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ${catkin_INCLUDE_DIRS}   # ROS 依赖包的头文件路径（必须）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ${功能包_INCLUDE_DIRS}   # 第三方库的头文件路径（可选）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-library" tabindex="-1"><a class="header-anchor" href="#add-library"><span>add_library()</span></a></h2><p>作用：将 <code>.cpp</code> 文件编译成库（静态库 <code>.a</code> 或动态库 <code>.so</code>）</p><p><strong>补充</strong>：其依赖于 <code>include_directories()</code>，<code>add_library()</code> 在编译 <code>.cpp</code> 文件时，会使用 <code>include_directories()</code> 指定的路径来解析 <code>#include</code> 语句</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">add_library(库名称</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  src/源文件1.cpp</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  src/源文件2.cpp</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  src/源文件n.cpp</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成的库的用处</strong>：</p><ol><li><p>本包的 <code>add_executable()</code> 目标：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">add_executable(执行文件名 src/执行文件.cpp)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">target_link_libraries(执行文件名 库名称)  # 链接本包生成的库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其他 ROS 包（通过 <code>catkin_package()</code> 导出）使用结构</p></li></ol><h2 id="add-executable" tabindex="-1"><a class="header-anchor" href="#add-executable"><span>add_executable()</span></a></h2><p>作用：构建可执行文件</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">add_executable(执行文件名 src/执行文件.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="add-dependencies" tabindex="-1"><a class="header-anchor" href="#add-dependencies"><span>add_dependencies()</span></a></h2><p>作用：用于显式声明目标之间的依赖关系，确保构建顺序的正确性</p><p>适用场景：当目标依赖 ROS 消息/服务、其他动态生成的文件或库时</p><p>解决的问题：</p><ul><li>解决隐式依赖问题：当目标（如可执行文件）依赖于其他目标生成的文件（如 ROS 消息/服务/动态库），但 CMake 无法自动推断这种关系时，强制指定构建顺序。</li><li>确保文件生成优先：典型场景是确保 ROS 的 <code>.msg</code>/<code>.srv</code>/<code>.action</code> 文件先被编译成代码，再被其他目标使用。</li></ul><p>在 ROS 构建流程中的位置：<code>add_dependencies()</code> 必须在 <code>add_executable()</code> 或 <code>add_library()</code> 之后调用</p><ol><li>定义目标：<code>add_executable()</code> 或 <code>add_library()</code></li><li>声明依赖：<code>add_dependencies()</code></li><li>链接库：<code>target_link_libraries()</code></li></ol><p>与 <code>target_link_libraries()</code> 的区别：即使通过 <code>target_link_libraries()</code> 链接了库，CMake 也可能无法自动推断构建顺序，仍需 <code>add_dependencies()</code></p><h2 id="target-link-libraries" tabindex="-1"><a class="header-anchor" href="#target-link-libraries"><span>target_link_libraries()</span></a></h2><p>作用：将可执行文件与它依赖的库进行链接</p><p><strong>编译与链接</strong>：</p><ul><li>编译：<code>add_executable()</code> 将 <code>.cpp</code> 文件编译成目标文件（<code>.o</code> 或 <code>.obj</code>），此时，代码中的函数调用只是符号引用（未确定实际地址）</li><li>链接：<code>target_link_libraries()</code> 将目标文件与库（<code>.so</code>/<code>.a</code>）绑定，解析符号引用 <ul><li>如果是动态链接，可执行文件运行时还需要加载 <code>.so</code> 文件</li></ul></li></ul><h2 id="初始建立的包的-cmakelists-txt-的内容" tabindex="-1"><a class="header-anchor" href="#初始建立的包的-cmakelists-txt-的内容"><span>初始建立的包的 CmakeLists.txt 的内容</span></a></h2><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>cmake_minimum_required(VERSION 3.0.2)</span></span>\n<span class="line"><span>project(功能包名)</span></span>\n<span class="line"><span>find_package(catkin REQUIRED COMPONENTS</span></span>\n<span class="line"><span>  roscpp</span></span>\n<span class="line"><span>  rospy</span></span>\n<span class="line"><span>  std_msgs</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span>catkin_package(</span></span>\n<span class="line"><span>#  INCLUDE_DIRS include</span></span>\n<span class="line"><span>#  LIBRARIES admittance</span></span>\n<span class="line"><span>#  CATKIN_DEPENDS roscpp rospy std_msgs</span></span>\n<span class="line"><span>#  DEPENDS system_lib</span></span>\n<span class="line"><span>)</span></span>\n<span class="line"><span>include_directories(</span></span>\n<span class="line"><span># include</span></span>\n<span class="line"><span>  ${catkin_INCLUDE_DIRS}</span></span>\n<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ul><li><a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="noopener noreferrer">CMakeLists.txt</a></li><li><a href="https://blog.csdn.net/jinking01/article/details/102891918" target="_blank" rel="noopener noreferrer">CMakeList.txt 中文翻译</a></li><li><a href="https://zhuanlan.zhihu.com/p/94579820" target="_blank" rel="noopener noreferrer">【ROS 学习笔记】CMakeLists.txt 与 package.xml</a></li></ul><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><ul><li><a href="https://blog.csdn.net/zhanghm1995/article/details/105466372" target="_blank" rel="noopener noreferrer">“轻松搞定CMake”系列之find_package用法详解</a></li></ul>',75)]))}]]),d=JSON.parse('{"path":"/SecondBrain/200-%E5%AD%A6%E4%B9%A0/203-ROS/ROS-02-ROS%20%E5%9F%BA%E7%A1%80-04-ROS%20%E7%BC%96%E8%AF%91%E8%84%9A%E6%9C%AC.html","title":"CMakeList.txt","lang":"zh-CN","frontmatter":{"description":"CMakeList.txt CMakeList.txt 概述 CMakeLists.txt 简称编译脚本，是 CMake 构建系统的配置文件，用于构建功能包 CMakeLists.txt 描述如何构建功能包 整体结构 函数串联流程 查找依赖：find_package() 查找所有需要的依赖包 配置 catkin：catkin_package() 声明包...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMakeList.txt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Soooooox\\",\\"url\\":\\"https://github.com/Soooooox\\"}]}"],["meta",{"property":"og:url","content":"https://soooooox.github.io/Vuepress-Notes/Vuepress-Notes/SecondBrain/200-%E5%AD%A6%E4%B9%A0/203-ROS/ROS-02-ROS%20%E5%9F%BA%E7%A1%80-04-ROS%20%E7%BC%96%E8%AF%91%E8%84%9A%E6%9C%AC.html"}],["meta",{"property":"og:site_name","content":"Soooooox 的小屋"}],["meta",{"property":"og:title","content":"CMakeList.txt"}],["meta",{"property":"og:description","content":"CMakeList.txt CMakeList.txt 概述 CMakeLists.txt 简称编译脚本，是 CMake 构建系统的配置文件，用于构建功能包 CMakeLists.txt 描述如何构建功能包 整体结构 函数串联流程 查找依赖：find_package() 查找所有需要的依赖包 配置 catkin：catkin_package() 声明包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":6.46,"words":1937},"filePathRelative":"SecondBrain/200-学习/203-ROS/ROS-02-ROS 基础-04-ROS 编译脚本.md","autoDesc":true}')},628:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}}}]);